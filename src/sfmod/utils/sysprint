#!/usr/bin/env python3
import sys, os, argparse
from sysflow.reader import FlattenedSFReader
from sysflow.formatter import SFFormatter

def files(path):  
    """list files in dir path"""
    for file in os.listdir(path):
        if os.path.isfile(os.path.join(path, file)):
            yield os.path.join(path, file)

def run(args):
    """execute sysprint"""
    for path in args.paths:
        if os.path.isfile(path):
            sysprint(path, args)
        elif os.path.isdir(path):
            traces = [f for f in files(path)]
            traces.sort(key=lambda f: int(''.join(filter(str.isdigit, f))))
            for t in traces:
                sysprint(t, args)
        else:
            raise argparse.ArgumentTypeError('existent file or dir path expected.')
           
def sysprint(trace, args):
    """print a sysflow file in human-readable format"""
    reader = FlattenedSFReader(trace, False)
    formatter = SFFormatter(reader)
    fields=args.fields.split(',') if args.fields is not None else None
    if args.output == 'json':
        if args.file is not None:
            formatter.toJsonFile(args.file, fields=fields)
        else:
            formatter.toJsonStdOut(fields=fields)
    elif args.output == 'csv' and args.file is not None:
            formatter.toCsvFile(args.file, fields=fields)
    elif args.output == 'str':
        formatter.toStdOut(fields=fields)
    else:
        raise argparse.ArgumentTypeError('unknown output type.')

if __name__ == '__main__':
    
    # set command line args
    parser = argparse.ArgumentParser(
        description='sysprint: a human-readable printer for Sysflow captures.'
    )
    parser.add_argument('paths', metavar='path', nargs='+', help='path from where to read trace files')
    parser.add_argument('-o', '--output', help='output format', choices=['str','json','csv'], default='str')
    parser.add_argument('-w', '--file', help='output file path', default=None)
    parser.add_argument('-f', '--fields', help='comma-separated list of sysflow fields to be printed', default=None)
   
    # parse args and configuration
    args = parser.parse_args()

    # input validation
    if args.output == 'csv' and args.file is None:
            raise argparse.ArgumentTypeError('output file path is required for csv output.')
    
    # run sysprint
    run(args)
    sys.exit(0)


